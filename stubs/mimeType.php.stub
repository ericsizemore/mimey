<?php

declare(strict_types=1);

namespace %namespace%;

use RuntimeException;
use InvalidArgumentException;
%interface_usage%
enum %classname%: string implements MimeTypeInterface
{
%cases%
	public function getExtension(): string
	{
		return match($this) {
%type2ext%
			// Match arm is unreachable because previous comparison is always true
            //default => throw new RuntimeException('Unknown extension for type: ' . $this->value),
		};
	}

	public function getValue(): string
	{
		return $this->value;
	}

	public static function fromExtension(string $extension): MimeType
	{
		$type = self::tryFromExtension($extension);

		if ($type === null) {
			throw new InvalidArgumentException('Unknown extension: ' . $extension);
		}
		return $type;
	}

	public static function tryFromExtension(string $extension): ?MimeType
	{
		return match($extension) {
%ext2type%
			default => null,
		};
	}
}
